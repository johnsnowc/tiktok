// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usersrv

import (
	"context"

	"genuine_douyin/apps/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DouyinUserRegisterRequest  = user.DouyinUserRegisterRequest
	DouyinUserRegisterResponse = user.DouyinUserRegisterResponse
	DouyinUserRequest          = user.DouyinUserRequest
	DouyinUserResponse         = user.DouyinUserResponse
	User                       = user.User

	UserSrv interface {
		Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error)
		Login(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error)
		GetUserById(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error)
	}

	defaultUserSrv struct {
		cli zrpc.Client
	}
)

func NewUserSrv(cli zrpc.Client) UserSrv {
	return &defaultUserSrv{
		cli: cli,
	}
}

func (m *defaultUserSrv) Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error) {
	client := user.NewUserSrvClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserSrv) Login(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error) {
	client := user.NewUserSrvClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserSrv) GetUserById(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error) {
	client := user.NewUserSrvClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}
